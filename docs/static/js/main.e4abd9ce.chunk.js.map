{"version":3,"sources":["components/main/questions-list/common.tsx","components/main/questions-list/questions/blur.tsx","components/main/questions-list/questions/_helpers.tsx","components/main/questions-list/questions/double-vision.tsx","components/main/questions-list/index.tsx","components/main/questions-list/questions/chromatic-aberration.tsx","components/main/image-result/canvas-render.tsx","components/main/question-store.tsx","components/main/questions.tsx","components/main/image-result/image-manip.tsx","components/main/index.tsx","App.tsx","serviceWorker.js","index.tsx","components/main/image-result/angles.png","components/main/image-result/panel.png"],"names":["QuestionIDs","YesNoQuestionIds","BlurQuestion","question","string","id","Blur","answers","no","yes","extraComponent","extraData","setExtraData","value","intensity","Box","Typography","Slider","min","max","step","onChange","e","v","selected","effect","ctx","original","canvas","blur","filter","drawImage","width","height","AngleMarks","label","Math","PI","QuestionList","ChromaticAberration","phase","angle","marks","floor","console","time","imageData","getImageData","data","dataCopy","slice","timeEnd","intensityX","sin","intensityY","cos","log","len","length","i","ii","putImageData","DoubleVision","alpha","intensityPx","globalAlpha","imageLoad","img","a","complete","decode","Promise","res","rej","addEventListener","image","canvasRef","current","warn","getContext","Date","imageWidth","imageHeight","imageAr","canvasWidth","canvasHeight","scale","style","last_render","uuid","renderCanvas","questions","showOriginal","this_render","clearRect","fillStyle","fillRect","imageSmoothingEnabled","qlist","Object","keys","map","q_id","q","_","requestAnimationFrame","key","CanvasRender","observer","currentImage","useRef","state","useContext","QuestionStore","registeredCanvas","registeredImage","useEffect","offsetWidth","offsetHeight","updateCanvasSize","initCanvas","then","className","display","ref","margin","forwardRef","QuestionStoreClass","b","this","_renderCanvas","a_id","toJS","observable","reduce","action","createContext","useStyles","makeStyles","theme","gridList","backgroundColor","palette","background","default","padding","Question","store","questionString","useState","opened","setOpened","Paper","elevation","onClick","fontSize","Collapse","in","FormControl","RadioGroup","setAnswer","target","ExtraComponent","setAnswerExtraData","FormControlLabel","toString","control","Radio","Questions","classes","GridList","cols","cellHeight","fsItem","position","actionButton","zIndex","left","right","bottom","zoomArea","screenHeight","center","alignSelf","crossedOutMark","transform","src2img","src","Image","file2img","file","reader","FileReader","onload","result","onerror","readAsDataURL","resizeImage","maxSize","i_ar","iw","ih","document","createElement","newImg","toDataURL","defaultImages","angles","panel","ImageManip","fullscreenChange","setImageCollapsed","setIsFullScreen","fullscreenElement","removeEventListener","canvasHolderRef","inputRef","imageCollapsed","isFullScreen","tabValue","setTabValue","setCurrentImage","join","transition","exitFullscreen","requestFullscreen","navigationUI","c","f","blobStr","substr","blobDecoded","atob","blobArrayBuffer","ArrayBuffer","blobUint8","Uint8Array","charCodeAt","blob","Blob","type","blobURL","URL","createObjectURL","dl","download","href","click","saveCanvas","opacity","setShowOriginal","collapsedHeight","Tabs","centered","Tab","hidden","accept","files","debug","minZoomScale","maxZoomScale","boundSize","contentSize","main","Main","flexFlow","flexGrow","Divider","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e4abd9ce.chunk.js","sourcesContent":["import {ChromaticAberrationQuestion} from \"./questions/chromatic-aberration\";\r\n\r\nexport enum QuestionIDs {\r\n  TestQuestion = 'test-q',\r\n  Blur = 'blur',\r\n  ChromaticAberration = 'chroma-aberration',\r\n  DoubleVision = 'DoubleVision',\r\n}\r\n\r\nexport enum YesNoQuestionIds {\r\n  yes = 'yes',\r\n  no = 'no'\r\n}","import React from \"react\";\r\nimport {QuestionIDs, YesNoQuestionIds} from \"../common\";\r\nimport {IQuestion} from \"../index\";\r\nimport {Box, Slider, Typography} from \"@material-ui/core\";\r\n\r\n\r\nexport interface BlurQuestionExtraData {\r\n  intensity: number\r\n}\r\n\r\n\r\nexport const BlurQuestion: IQuestion<YesNoQuestionIds, BlurQuestionExtraData> = {\r\n  question: {\r\n    string: \"Blurred vision?\",\r\n    id: QuestionIDs.Blur\r\n  },\r\n  answers: [\r\n    {\r\n      string: 'no',\r\n      id: YesNoQuestionIds.no\r\n    },\r\n    {\r\n      string: 'yes',\r\n      id: YesNoQuestionIds.yes,\r\n      extraComponent: ({extraData, setExtraData}) => {\r\n        const value = extraData ? extraData.intensity : 0;\r\n        return (\r\n          <Box>\r\n            <Typography> Blur intensity </Typography>\r\n            <Slider\r\n              min={0}\r\n              max={5}\r\n              value={value}\r\n              step={0.1}\r\n              onChange={(e, v) => setExtraData({intensity: v as number})}\r\n            /></Box>)\r\n      }\r\n    }\r\n  ],\r\n  selected: {\r\n    id: YesNoQuestionIds.no\r\n  },\r\n  effect: (ctx: CanvasRenderingContext2D, {id, extraData}, {original}) => {\r\n    if (id === YesNoQuestionIds.no) {\r\n      return;\r\n    }\r\n\r\n    const canvas = ctx.canvas;\r\n    const blur = (extraData && extraData.intensity) || 0;\r\n\r\n    // canvas.style.filter += ` blur(${blur}px)`;\r\n\r\n    ctx.filter = `blur(${blur}px)`;\r\n    ctx.drawImage(\r\n      original,\r\n      0, 0,\r\n      original.width, original.height,\r\n      0, 0,\r\n      canvas.width, canvas.height\r\n    );\r\n    ctx.filter = 'none';\r\n  }\r\n};\r\n\r\n","import {Mark} from \"@material-ui/core/Slider\";\r\nimport ArrowDown from \"@material-ui/icons/ArrowDownward\"\r\nimport ArrowUp from \"@material-ui/icons/ArrowUpward\"\r\nimport ArrowLeft from \"@material-ui/icons/ArrowBack\"\r\nimport ArrowRight from \"@material-ui/icons/ArrowForward\"\r\nimport React from \"react\";\r\n\r\nexport const AngleMarks: Mark[] = [\r\n  {value: 0, label: <ArrowDown/>},\r\n  {value: Math.PI / 2, label: <ArrowRight/>},\r\n  {value: Math.PI, label: <ArrowUp/>},\r\n  {value: 3 * Math.PI / 2, label: <ArrowLeft/>},\r\n  {value: 2 * Math.PI, label: <ArrowDown/>},\r\n];","import React from \"react\";\r\nimport {QuestionIDs, YesNoQuestionIds} from \"../common\";\r\nimport {IQuestion} from \"../index\";\r\nimport {Box, Slider, Typography} from \"@material-ui/core\";\r\nimport {isMainThread} from \"worker_threads\";\r\nimport {AngleMarks} from \"./_helpers\";\r\n\r\nexport interface DoubleVisionQuestionExtraData {\r\n  intensity: number\r\n  angle: number\r\n  alpha: number\r\n}\r\n\r\n\r\nexport const DoubleVisionQuestion: IQuestion<YesNoQuestionIds, DoubleVisionQuestionExtraData> = {\r\n  question: {\r\n    string: \"Double vision?\",\r\n    id: QuestionIDs.DoubleVision\r\n  },\r\n  answers: [\r\n    {\r\n      string: 'no',\r\n      id: YesNoQuestionIds.no\r\n    },\r\n    {\r\n      string: 'yes',\r\n      id: YesNoQuestionIds.yes,\r\n      extraComponent: ({extraData, setExtraData}) => {\r\n        const intensity = extraData ? extraData.intensity : 0;\r\n        const angle = extraData ? extraData.angle : 0;\r\n        const alpha = extraData ? extraData.alpha : 0;\r\n        return (\r\n          <Box>\r\n            <Typography> Separation intensity </Typography>\r\n            <Slider\r\n              min={0}\r\n              max={0.15}\r\n              value={intensity}\r\n              step={0.005}\r\n              onChange={(e, v) => setExtraData({\r\n                ...extraData,\r\n                intensity: v as number\r\n              })}\r\n            />\r\n            <Typography> Image intensity </Typography>\r\n            <Slider\r\n              min={0}\r\n              max={1}\r\n              value={alpha}\r\n              step={0.05}\r\n              onChange={(e, v) => setExtraData({\r\n                ...extraData,\r\n                alpha: v as number\r\n              })}\r\n            />\r\n            <Typography> Angle </Typography>\r\n            <Slider\r\n              min={0}\r\n              max={Math.PI * 2}\r\n              value={angle}\r\n              step={0.01}\r\n              marks={AngleMarks}\r\n              onChange={(e, v) => setExtraData({\r\n                ...extraData,\r\n                angle: v as number\r\n              })}\r\n            />\r\n          </Box>\r\n        )\r\n      }\r\n    }\r\n  ],\r\n  selected: {\r\n    id: YesNoQuestionIds.no,\r\n    extraData: {\r\n      angle: 0,\r\n      intensity: 0.1,\r\n      alpha: 0.5\r\n    }\r\n  },\r\n  effect: (ctx: CanvasRenderingContext2D, {id, extraData}, {original}) => {\r\n    if (id === YesNoQuestionIds.no) {\r\n      return;\r\n    }\r\n\r\n    const angle = (extraData && extraData.angle) || 0;\r\n    const intensity = (extraData && extraData.intensity) || 0;\r\n    const alpha = (extraData && extraData.alpha) || 0;\r\n    const canvas = ctx.canvas;\r\n\r\n    const intensityPx = Math.min(canvas.width, canvas.height) * intensity;\r\n\r\n    const intensityX = Math.floor(Math.sin(angle) * intensityPx);\r\n    const intensityY = Math.floor(Math.cos(angle) * intensityPx);\r\n\r\n    ctx.globalAlpha = alpha;\r\n    ctx.drawImage(\r\n      original,\r\n      0, 0,\r\n      original.width, original.height,\r\n      intensityX, intensityY,\r\n      canvas.width, canvas.height\r\n    );\r\n    ctx.globalAlpha = 1;\r\n  }\r\n};\r\n\r\n","import React from \"react\";\r\nimport {QuestionIDs} from \"./common\";\r\nimport {BlurQuestion} from \"./questions/blur\";\r\nimport {ChromaticAberrationQuestion} from \"./questions/chromatic-aberration\";\r\nimport {DoubleVisionQuestion} from \"./questions/double-vision\";\r\n\r\nexport interface IQuestion<AnswerEnum, AnswerExtraData = any> {\r\n  question: {\r\n    string: string,\r\n    id: QuestionIDs\r\n  },\r\n  answers: {\r\n    string: string,\r\n    id: AnswerEnum\r\n    extraComponent?: React.FunctionComponent<{ extraData: AnswerExtraData, setExtraData: (e: AnswerExtraData) => void }>\r\n  }[],\r\n  selected: {\r\n    id: AnswerEnum,\r\n    extraData?: AnswerExtraData\r\n  },\r\n  effect: (\r\n    ctx: CanvasRenderingContext2D,\r\n    data: { id: AnswerEnum, extraData?: AnswerExtraData },\r\n    extra: {\r\n      original: HTMLImageElement\r\n    }\r\n  ) => void\r\n}\r\n\r\nexport const QuestionList = [\r\n  BlurQuestion,\r\n  ChromaticAberrationQuestion,\r\n  DoubleVisionQuestion,\r\n];","import React from \"react\";\r\nimport {QuestionIDs, YesNoQuestionIds} from \"../common\";\r\nimport {IQuestion} from \"../index\";\r\nimport {Box, Slider, Typography} from \"@material-ui/core\";\r\nimport {AngleMarks} from \"./_helpers\";\r\n\r\nexport interface ChromaticAberrationQuestionExtraData {\r\n  intensity: number\r\n  phase: number\r\n  angle: number\r\n}\r\n\r\n\r\nexport const ChromaticAberrationQuestion: IQuestion<YesNoQuestionIds, ChromaticAberrationQuestionExtraData> = {\r\n  question: {\r\n    string: \"Color separation?\",\r\n    id: QuestionIDs.ChromaticAberration\r\n  },\r\n  answers: [\r\n    {\r\n      string: 'no',\r\n      id: YesNoQuestionIds.no\r\n    },\r\n    {\r\n      string: 'yes',\r\n      id: YesNoQuestionIds.yes,\r\n      extraComponent: ({extraData, setExtraData}) => {\r\n        const intensity = extraData ? extraData.intensity : 0;\r\n        const phase = extraData ? extraData.phase : 0;\r\n        const angle = extraData ? extraData.angle : 0;\r\n        return (\r\n          <Box>\r\n            <Typography> Separation intensity </Typography>\r\n            <Slider\r\n              min={0}\r\n              max={15}\r\n              value={intensity}\r\n              step={1}\r\n              onChange={(e, v) => setExtraData({\r\n                ...extraData,\r\n                intensity: v as number\r\n              })}\r\n            />\r\n            <Typography> Angle </Typography>\r\n            <Slider\r\n              min={0}\r\n              max={Math.PI * 2}\r\n              value={angle}\r\n              step={0.01}\r\n              marks={AngleMarks}\r\n              onChange={(e, v) => setExtraData({\r\n                ...extraData,\r\n                angle: v as number\r\n              })}\r\n            />\r\n            <Typography> Color Separation Type </Typography>\r\n            <Slider\r\n              min={0}\r\n              max={2}\r\n              value={phase}\r\n              step={1}\r\n              onChange={(e, v) => setExtraData({\r\n                ...extraData,\r\n                phase: v as number\r\n              })}\r\n            />\r\n          </Box>\r\n        )\r\n      }\r\n    }\r\n  ],\r\n  selected: {\r\n    id: YesNoQuestionIds.no\r\n  },\r\n  effect: (ctx: CanvasRenderingContext2D, {id, extraData}) => {\r\n    if (id === YesNoQuestionIds.no) {\r\n      return;\r\n    }\r\n\r\n    const phase = Math.floor((extraData && extraData.phase) || 0);\r\n    const angle = (extraData && extraData.angle) || 0;\r\n    // const subPhase = ((extraData && extraData.phase) || 0) - phase;\r\n    const intensity = Math.floor((extraData && extraData.intensity) || 0);\r\n    const canvas = ctx.canvas;\r\n\r\n    const skip = 0;\r\n    const loopI = (skip + 1) * 4;\r\n\r\n    console.time('get');\r\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n    const data = imageData.data;\r\n    const dataCopy = data.slice();\r\n    console.timeEnd('get');\r\n\r\n    const intensityX = Math.floor(Math.sin(angle) * intensity);\r\n    const intensityY = Math.floor(Math.cos(angle) * intensity);\r\n\r\n    console.log(Math.sin(angle), Math.cos(angle));\r\n    console.log(intensityX,intensityY);\r\n\r\n    const len = data.length;\r\n\r\n    console.time('js');\r\n\r\n    // if (subPhase === 0) {\r\n    let i = phase;\r\n    let ii = i + intensityX * 4 + (canvas.width * 4 * intensityY);\r\n    for (\r\n      ;\r\n      i < len && ii < len;\r\n      i += loopI, ii += loopI\r\n    ) {\r\n      if (i > 0 && ii > 0 && i < len && ii < len) {\r\n        data[i] = dataCopy[ii];\r\n      }\r\n    }\r\n\r\n    // } else {\r\n    //   for (\r\n    //     let i = phase % 4, ii = i + intensity4;\r\n    //     i < len && ii < len;\r\n    //     i += loopI, ii += loopI\r\n    //   ) {\r\n    //     data[i] = data[ii] * (1 - subPhase) + data[ii + 1] * subPhase;\r\n    //     data[i + 4] = data[ii] * (subPhase) + data[ii + 1] * (1 - subPhase);\r\n    //   }\r\n    // }\r\n    console.timeEnd('js');\r\n\r\n    console.time('put');\r\n    ctx.putImageData(imageData, 0, 0);\r\n    console.timeEnd('put');\r\n  }\r\n};\r\n\r\n","import {observer} from \"mobx-react-lite\";\r\nimport React, {RefObject, useContext, useEffect, useRef} from \"react\";\r\nimport {QuestionStore} from \"../question-store\";\r\nimport {QuestionIDs} from \"../questions-list/common\";\r\nimport {IQuestion} from \"../questions-list\";\r\nimport uuid from 'uuid';\r\n\r\nasync function imageLoad(img: HTMLImageElement) {\r\n  if (img.complete) return;\r\n\r\n  if (img.decode) {\r\n    return await img.decode();\r\n  }\r\n\r\n  return await new Promise((res, rej) => {\r\n    img.addEventListener('load', res);\r\n    img.addEventListener('error', rej);\r\n  });\r\n}\r\n\r\nfunction updateCanvasSize(canvasRef: RefObject<HTMLCanvasElement>) {\r\n  const canvas = canvasRef.current;\r\n  if (!canvas) {\r\n    return\r\n  }\r\n\r\n  canvas.width = canvas.offsetWidth;\r\n  canvas.height = canvas.offsetHeight;\r\n}\r\n\r\nasync function initCanvas(image: HTMLImageElement, canvasRef: RefObject<HTMLCanvasElement>) {\r\n  if (!canvasRef.current) {\r\n    console.warn('we don\\'t have a canvas yet!');\r\n    return;\r\n  }\r\n\r\n  const canvas = canvasRef.current;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n  if (!ctx) {\r\n    console.warn('we don\\'t have a ctx yet!');\r\n    return;\r\n  }\r\n\r\n  console.log('rendering canvas', new Date());\r\n\r\n  await imageLoad(image);\r\n\r\n  const imageWidth = image.width;\r\n  const imageHeight = image.height;\r\n  const imageAr = imageWidth / imageHeight;\r\n\r\n  canvas.height = canvas.width / imageAr;\r\n\r\n  const canvasWidth = canvas.width;\r\n  const canvasHeight = canvas.height;\r\n\r\n  const scale = canvasWidth / imageWidth;\r\n\r\n  canvas.style.width = canvasWidth + \"px\";\r\n  canvas.style.height = canvasHeight + \"px\";\r\n  canvas.width /= scale;\r\n  canvas.height /= scale;\r\n}\r\n\r\nlet last_render: string = uuid();\r\n\r\nexport async function renderCanvas(image: HTMLImageElement, questions: ({ [s in QuestionIDs]: IQuestion<any> }), canvasRef: RefObject<HTMLCanvasElement>, showOriginal: boolean) {\r\n  const this_render = uuid();\r\n  last_render = this_render;\r\n\r\n  if (!canvasRef.current) {\r\n    console.warn('we don\\'t have a canvas yet!');\r\n    return;\r\n  }\r\n\r\n  const canvas = canvasRef.current;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n  if (!ctx) {\r\n    console.warn('we don\\'t have a ctx yet!');\r\n    return;\r\n  }\r\n  const imageWidth = image.width;\r\n  const imageHeight = image.height;\r\n\r\n  console.log('rendering canvas', new Date());\r\n\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctx.fillStyle = 'white';\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n  ctx.imageSmoothingEnabled = false;\r\n  // ctx.imageSmoothingQuality = \"high\";\r\n  ctx.drawImage(image,\r\n    0, 0,\r\n    imageWidth, imageHeight,\r\n    0, 0,\r\n    canvas.width, canvas.height);\r\n\r\n  if (!showOriginal) {\r\n    const qlist = Object.keys(questions).map((q_id) => questions[q_id as QuestionIDs])\r\n\r\n    for (let i = 0; i < qlist.length; i++) {\r\n      const q = qlist[i];\r\n\r\n      await new Promise(_ => requestAnimationFrame(_));\r\n\r\n      // this is here to break the chain of the previous render if a new one is initiated\r\n      if (last_render === this_render) {\r\n        const key = `canvas-${q.question.id}`;\r\n        console.time(key);\r\n        q.effect(ctx, q.selected, {\r\n          original: image\r\n        });\r\n        console.timeEnd(key);\r\n      } else {\r\n        console.log('break render', this_render, last_render);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\nexport type CanvasRenderProps = {\r\n  currentImage: HTMLImageElement\r\n}\r\n\r\nexport const CanvasRender = observer(({currentImage}: CanvasRenderProps, canvasRef: React.RefObject<HTMLCanvasElement>) => {\r\n  if (!canvasRef) {\r\n    canvasRef = useRef<HTMLCanvasElement>(null);\r\n  }\r\n\r\n  const state = useContext(QuestionStore);\r\n\r\n  const questions = state.questions;\r\n\r\n  state.registeredCanvas = canvasRef;\r\n  state.registeredImage = currentImage;\r\n\r\n  useEffect(() => {\r\n    updateCanvasSize(canvasRef);\r\n    initCanvas(currentImage, canvasRef)\r\n      .then(() => renderCanvas(currentImage, questions, canvasRef, state.showOriginal))\r\n  });\r\n\r\n  return (\r\n    <div className=\"full-width full-height\" style={{display: 'flex'}}>\r\n      <canvas ref={canvasRef} className=\"full-height\" style={{margin: \"0 auto\"}}/>\r\n    </div>\r\n  )\r\n\r\n}, {forwardRef: true});\r\n","import {action, observable, toJS} from 'mobx'\r\nimport {createContext, Ref, RefObject} from \"react\";\r\nimport {IQuestion, QuestionList} from \"./questions-list\";\r\nimport {QuestionIDs} from \"./questions-list/common\";\r\nimport {renderCanvas} from \"./image-result/canvas-render\";\r\n\r\nclass QuestionStoreClass {\r\n\r\n  @observable questions: ({ [s in QuestionIDs]: IQuestion<any> }) = QuestionList.reduce<({ [s in QuestionIDs]: IQuestion<any> })>(\r\n    (a, q) => {\r\n      a[q.question.id] = q;\r\n      return a;\r\n    },\r\n    {} as ({ [s in QuestionIDs]: IQuestion<any> })\r\n  );\r\n\r\n  @observable showOriginal = false;\r\n\r\n  @action setShowOriginal(b: boolean) {\r\n    this.showOriginal = b;\r\n    this._renderCanvas();\r\n  }\r\n\r\n  @action setAnswer<AnswerEnum, AnswerExtraData>(q_id: QuestionIDs, a_id: AnswerEnum, extraData?: AnswerExtraData) {\r\n    const question = this.questions[q_id];\r\n\r\n    console.log('setting answer to', toJS(question), 'to', a_id);\r\n\r\n    question.selected = {\r\n      id: a_id\r\n    };\r\n    if (extraData) {\r\n      question.selected.extraData = {\r\n        ...(question.selected.extraData || {}),\r\n        ...extraData\r\n      }\r\n    }\r\n\r\n    this._renderCanvas();\r\n  }\r\n\r\n  @action setAnswerExtraData<AnswerExtraData>(q_id: QuestionIDs, extraData: AnswerExtraData) {\r\n    const question = this.questions[q_id];\r\n    question.selected.extraData = extraData;\r\n    this._renderCanvas();\r\n  }\r\n\r\n  registeredCanvas: RefObject<HTMLCanvasElement> | null = null;\r\n  registeredImage: HTMLImageElement | null = null;\r\n\r\n  private _renderCanvas() {\r\n    requestAnimationFrame(() => {\r\n      if (this.registeredImage && this.registeredCanvas) {\r\n        renderCanvas(this.registeredImage, this.questions, this.registeredCanvas, this.showOriginal)\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport const QuestionStore = createContext(new QuestionStoreClass());\r\n","import {Collapse, FormControlLabel, GridList, makeStyles, Paper, Radio, RadioGroup} from \"@material-ui/core\";\r\nimport React, {useContext, useState} from \"react\";\r\nimport {QuestionStore} from \"./question-store\";\r\nimport './question.css'\r\nimport ArrowDrop from '@material-ui/icons/ArrowDropDownCircleOutlined'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport {observer} from 'mobx-react-lite'\r\nimport {QuestionIDs} from \"./questions-list/common\";\r\nimport {QuestionList} from \"./questions-list\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  gridList: {\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: '16px'\r\n  },\r\n}));\r\n\r\n\r\nexport const Question = observer(({q_id}: { q_id: QuestionIDs }) => {\r\n\r\n  const store = useContext(QuestionStore);\r\n\r\n  const questionString = store.questions[q_id].question.string;\r\n  const answers = store.questions[q_id].answers;\r\n  const selected = store.questions[q_id].selected;\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  return (\r\n    <Paper className=\"question\" elevation={2}>\r\n      <Paper onClick={() => setOpened(!opened)} elevation={1} className=\"header\">\r\n        <ArrowDrop fontSize={\"inherit\"} height={'30px'}/>\r\n        <span>{questionString}</span>\r\n      </Paper>\r\n      <Collapse in={opened}>\r\n        <FormControl className=\"content full-width\">\r\n          <RadioGroup\r\n            onChange={(e) => store.setAnswer(q_id, e.target.value)}\r\n            value={selected && selected.id}\r\n          >\r\n            {\r\n              answers.map((a, i) => {\r\n                const ExtraComponent = (\r\n                  selected && selected.id === a.id &&\r\n                  a.extraComponent\r\n                ) ?\r\n                  <a.extraComponent\r\n                    extraData={selected.extraData}\r\n                    setExtraData={(e) => store.setAnswerExtraData(q_id, e)}\r\n                  /> :\r\n                  null;\r\n\r\n                return (\r\n                  <div key={i} className=\"full-width\">\r\n                    <FormControlLabel\r\n                      className=\"full-width\"\r\n                      key={a.id.toString()}\r\n                      value={a.id.toString()}\r\n                      control={<Radio/>}\r\n                      label={a.string}\r\n                    />\r\n                    {ExtraComponent}\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </RadioGroup>\r\n        </FormControl>\r\n      </Collapse>\r\n    </Paper>\r\n  );\r\n\r\n});\r\n\r\nexport const Questions = () => {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <GridList cols={1} className={classes.gridList} cellHeight={'auto'} style={{margin: 0}}>\r\n      {\r\n        QuestionList.map((q, i) => <Question key={i} q_id={q.question.id}/>)\r\n      }\r\n    </GridList>\r\n  )\r\n\r\n};","import {observer} from \"mobx-react-lite\";\r\nimport React, {RefObject, useContext, useEffect, useRef, useState} from \"react\";\r\nimport {QuestionStore} from \"../question-store\";\r\nimport angles from './angles.png';\r\nimport {Collapse, makeStyles, Tab, Tabs} from \"@material-ui/core\";\r\nimport PinchToZoom from \"react-pinch-and-zoom\";\r\nimport panel from \"./panel.png\";\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward'\r\nimport Fullscreen from '@material-ui/icons/Fullscreen'\r\nimport FullscreenExit from '@material-ui/icons/FullscreenExit'\r\nimport SaveIcon from '@material-ui/icons/SaveAlt'\r\nimport EyeIcon from \"@material-ui/icons/RemoveRedEye\"\r\nimport RemoveIcon from \"@material-ui/icons/Remove\"\r\nimport {CanvasRender} from \"./canvas-render\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  fsItem: {\r\n    background: theme.palette.background.default,\r\n    position: 'relative'\r\n  },\r\n  actionButton: {\r\n    fontSize: '48px',\r\n    position: 'absolute',\r\n    zIndex: 1\r\n  },\r\n  left: {\r\n    left: 0\r\n  },\r\n  right: {\r\n    right: 0\r\n  },\r\n  bottom: {\r\n    bottom: 0\r\n  },\r\n  zoomArea: {\r\n    zIndex: 0,\r\n    width: '100%',\r\n    // height: '100%'\r\n  },\r\n  screenHeight: {\r\n    height: '100vh'\r\n  },\r\n  center: {\r\n    margin: '0 auto',\r\n    alignSelf: 'center'\r\n  },\r\n  crossedOutMark: {\r\n    transform: 'rotate(45deg) scale(1.5)'\r\n  }\r\n}));\r\n\r\n\r\nconst src2img = (src: string): HTMLImageElement => {\r\n  const img = new Image();\r\n  img.src = src;\r\n  return img;\r\n};\r\nconst file2img = async (file: File): Promise<HTMLImageElement> => {\r\n  const img = new Image();\r\n\r\n  const data = await new Promise<string>((res, rej) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => res(reader.result as string);\r\n    reader.onerror = rej;\r\n\r\n    reader.readAsDataURL(file);\r\n  });\r\n\r\n  img.src = data;\r\n\r\n  return img;\r\n};\r\nconst resizeImage = (img: HTMLImageElement, maxSize = 2000): HTMLImageElement => {\r\n\r\n  const i_ar = img.width / img.height;\r\n  let iw = img.width;\r\n  let ih = img.height;\r\n\r\n  if (iw > maxSize) {\r\n    iw = maxSize;\r\n    ih = iw / i_ar;\r\n  }\r\n  if (ih > maxSize) {\r\n    ih = maxSize;\r\n    iw = ih * i_ar;\r\n  }\r\n\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = iw;\r\n  canvas.height = ih;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  if (!ctx) {\r\n    return img;\r\n  }\r\n\r\n  ctx.drawImage(\r\n    img,\r\n    0, 0,\r\n    img.width, img.height,\r\n    0, 0,\r\n    iw, ih\r\n  );\r\n\r\n  const newImg = new Image(iw, ih);\r\n  newImg.src = canvas.toDataURL('image/png');\r\n  return newImg;\r\n};\r\n\r\nconst defaultImages = {\r\n  angles: src2img(angles),\r\n  panel: src2img(panel)\r\n};\r\n\r\nconst saveCanvas = (c: RefObject<HTMLCanvasElement> | null, f: string = 'image.png') => {\r\n  if (!c || !c.current) {\r\n    return;\r\n  }\r\n  const blobStr = c.current.toDataURL('image/png').substr('data:image/png;base64,'.length);\r\n  const blobDecoded = atob(blobStr);\r\n  console.log(blobStr);\r\n  const blobArrayBuffer = new ArrayBuffer(blobDecoded.length);\r\n  const blobUint8 = new Uint8Array(blobArrayBuffer);\r\n\r\n  for (let i = 0; i < blobDecoded.length; i += 1) {\r\n    blobUint8[i] = blobDecoded.charCodeAt(i);\r\n  }\r\n\r\n  const blob = new Blob(\r\n    [blobUint8],\r\n    {type: 'image/png'}\r\n  );\r\n  const blobURL = URL.createObjectURL(blob);\r\n\r\n  const dl = document.createElement('a');\r\n  dl.download = f;\r\n  dl.href = blobURL;\r\n  dl.click();\r\n};\r\n\r\nexport const ImageManip = observer(() => {\r\n  const classes = useStyles();\r\n  const state = useContext(QuestionStore);\r\n\r\n  useEffect(() => {\r\n    const fullscreenChange = () => {\r\n      setImageCollapsed(false);\r\n      setIsFullScreen(!!document.fullscreenElement);\r\n    };\r\n    document.addEventListener(\"fullscreenchange\", fullscreenChange);\r\n    return function cleanup() {\r\n      document.removeEventListener(\"fullscreenchange\", fullscreenChange);\r\n    }\r\n  }, []);\r\n\r\n  const canvasHolderRef = useRef<HTMLDivElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const [imageCollapsed, setImageCollapsed] = useState(false);\r\n  const [isFullScreen, setIsFullScreen] = useState(false);\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [currentImage, setCurrentImage] = useState(defaultImages.angles);\r\n\r\n  return (\r\n    <div ref={canvasHolderRef} className={classes.fsItem}>\r\n\r\n      {!isFullScreen ?\r\n        <ArrowUpward\r\n          onClick={() => setImageCollapsed(!imageCollapsed)}\r\n          className={[classes.actionButton, classes.left].join(' ')}\r\n          style={{\r\n            transform: imageCollapsed ? '' : 'rotate(180deg)',\r\n            transition: 'transform .3s ease-out',\r\n          }}\r\n        /> : null}\r\n\r\n      {!isFullScreen ?\r\n        <Fullscreen\r\n          className={[classes.actionButton, classes.right].join(' ')}\r\n          onClick={() =>\r\n            canvasHolderRef.current &&\r\n            canvasHolderRef.current\r\n              .requestFullscreen({navigationUI: 'hide'})\r\n              .then(() => setIsFullScreen(true))\r\n          }\r\n        /> :\r\n        <FullscreenExit\r\n          className={[classes.actionButton, classes.right].join(' ')}\r\n          onClick={() =>\r\n            document.exitFullscreen()\r\n              .then(() => setIsFullScreen(false))\r\n          }\r\n        />\r\n      }\r\n\r\n      <SaveIcon\r\n        className={[classes.actionButton, classes.right, classes.bottom].join(' ')}\r\n        onClick={() => !state.showOriginal && saveCanvas(state.registeredCanvas)}\r\n        opacity={state.showOriginal ? .5 : 1}\r\n      />\r\n      <EyeIcon\r\n        className={[classes.actionButton, classes.bottom, classes.left].join(' ')}\r\n        onClick={() => state.setShowOriginal(true)}\r\n      />\r\n      {state.showOriginal ?\r\n        <RemoveIcon\r\n          className={[classes.actionButton, classes.bottom, classes.left, classes.crossedOutMark].join(' ')}\r\n          onClick={() => state.setShowOriginal(false)}\r\n        /> : null}\r\n\r\n      <Collapse in={!imageCollapsed} collapsedHeight={'120px'}>\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={(e, v) => setTabValue(v)}\r\n          centered={true}\r\n        >\r\n          <Tab label=\"Angles\" onClick={() => setCurrentImage(defaultImages.angles)}/>\r\n          <Tab label=\"Panel\" onClick={() => setCurrentImage(defaultImages.panel)}/>\r\n          <Tab label=\"Image\" onClick={() => {\r\n            inputRef.current && inputRef.current.click();\r\n          }}/>\r\n        </Tabs>\r\n        <input\r\n          hidden={true}\r\n          ref={inputRef}\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={(e) =>\r\n            e.target &&\r\n            e.target.files &&\r\n            e.target.files[0] &&\r\n            file2img(e.target.files[0])\r\n              .then(resizeImage)\r\n              .then((img) => {\r\n                setCurrentImage(img);\r\n                if (inputRef.current) {\r\n                  inputRef.current.value = '';\r\n                }\r\n              })\r\n          }\r\n        />\r\n\r\n        <PinchToZoom\r\n          debug={false}\r\n          className={[\r\n            classes.zoomArea,\r\n            isFullScreen ? classes.screenHeight : ''\r\n          ].join(' ')}\r\n          minZoomScale={0.9}\r\n          maxZoomScale={10}\r\n          boundSize={{height: 0, width: 0}}\r\n          contentSize={{height: 0, width: 0}}\r\n        >\r\n\r\n          <CanvasRender\r\n            currentImage={currentImage}\r\n          />\r\n        </PinchToZoom>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n})","import React from \"react\";\r\nimport {Divider, makeStyles} from \"@material-ui/core\";\r\nimport {Questions} from \"./questions\";\r\nimport {ImageManip} from \"./image-result/image-manip\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  main: {\r\n    background: theme.palette.background.default\r\n  },\r\n\r\n}));\r\n\r\nexport const Main = () => {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={`full-height full-width ${classes.main}`} style={{display: 'flex', flexFlow: 'column'}}>\r\n      <div style={{flexGrow: 1}}>\r\n        <Questions/>\r\n      </div>\r\n\r\n      <Divider/>\r\n\r\n      <ImageManip/>\r\n    </div>\r\n  );\r\n\r\n};","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport {Main} from \"./components/main\";\n\nfunction App() {\n  return (\n    <Router>\n      {/*<div>*/}\n      {/*  <ul>*/}\n      {/*    <li>*/}\n      {/*      <Link to=\"/\">Home</Link>*/}\n      {/*    </li>*/}\n      {/*    <li>*/}\n      {/*      <Link to=\"/about\">About</Link>*/}\n      {/*    </li>*/}\n      {/*    <li>*/}\n      {/*      <Link to=\"/topics\">Topics</Link>*/}\n      {/*    </li>*/}\n      {/*  </ul>*/}\n\n      {/*  <hr />*/}\n\n      <Route exact path=\"/\" component={Main}/>\n      <Route path=\"/about\" component={() => <strong>About</strong>}/>\n      <Route path=\"/topics\" component={() => <strong>Topics</strong>}/>\n      {/*</div>*/}\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/angles.062caee1.png\";","module.exports = __webpack_public_path__ + \"static/media/panel.c5657b9f.png\";"],"sourceRoot":""}